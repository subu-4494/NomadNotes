{"ast":null,"code":"const API_BASE_URL = \"http://localhost:5000/api\";\nexport async function loginUser(credentials) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n    return await response.json();\n  } catch (err) {\n    return {\n      message: \"Network error. Please try again later.\"\n    };\n  }\n}\nexport async function registerUser(credentials) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || \"Registration failed\");\n    }\n    return data;\n  } catch (err) {\n    return {\n      message: err.message || \"Network error. Please try again later.\"\n    };\n  }\n}\n\n// Fetch all notes of logged-in user\nexport async function getNotes() {\n  const token = localStorage.getItem(\"token\");\n  const res = await fetch(`${API_BASE_URL}/notes`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch notes\");\n  return res.json();\n}\n\n// Delete note by id\nexport async function deleteNote(id) {\n  const token = localStorage.getItem(\"token\");\n  const res = await fetch(`${API_BASE_URL}/notes/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to delete note\");\n  return res.json();\n}\n\n// Update note by id (assuming JSON body, no image update here)\nexport async function updateNote(id, updatedData) {\n  // updatedData = { title, content, topic }\n  const token = localStorage.getItem(\"token\");\n  const res = await fetch(`${API_BASE_URL}/notes/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(updatedData)\n  });\n  if (!res.ok) throw new Error(\"Failed to update note\");\n  return res.json();\n}\n\n// Create new note with optional image upload\nexport async function createNote(noteData) {\n  // noteData = { title, content, topic, imageFile (optional) }\n  const token = localStorage.getItem(\"token\");\n  const formData = new FormData();\n  formData.append(\"title\", noteData.title);\n  formData.append(\"content\", noteData.content);\n  formData.append(\"topic\", noteData.topic);\n  if (noteData.imageFile) {\n    formData.append(\"image\", noteData.imageFile);\n  }\n  const res = await fetch(`${API_BASE_URL}/notes/create`, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}` // Do NOT set Content-Type manually when using FormData\n    },\n    body: formData\n  });\n  if (!res.ok) {\n    let errorMsg = \"Failed to create note\";\n    try {\n      const errData = await res.json();\n      errorMsg = errData.message || errorMsg;\n    } catch {}\n    throw new Error(errorMsg);\n  }\n  return res.json();\n}","map":{"version":3,"names":["API_BASE_URL","loginUser","credentials","response","fetch","method","headers","body","JSON","stringify","json","err","message","registerUser","data","ok","Error","getNotes","token","localStorage","getItem","res","Authorization","deleteNote","id","updateNote","updatedData","createNote","noteData","formData","FormData","append","title","content","topic","imageFile","errorMsg","errData"],"sources":["D:/web development/Projects/NomadNotes/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:5000/api\";\r\n\r\nexport async function loginUser(credentials) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    return await response.json();\r\n  } catch (err) {\r\n    return { message: \"Network error. Please try again later.\" };\r\n  }\r\n}\r\n\r\nexport async function registerUser(credentials) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || \"Registration failed\");\r\n    }\r\n\r\n    return data;\r\n  } catch (err) {\r\n    return { message: err.message || \"Network error. Please try again later.\" };\r\n  }\r\n}\r\n\r\n// Fetch all notes of logged-in user\r\nexport async function getNotes() {\r\n  const token = localStorage.getItem(\"token\");\r\n  const res = await fetch(`${API_BASE_URL}/notes`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  if (!res.ok) throw new Error(\"Failed to fetch notes\");\r\n  return res.json();\r\n}\r\n\r\n// Delete note by id\r\nexport async function deleteNote(id) {\r\n  const token = localStorage.getItem(\"token\");\r\n  const res = await fetch(`${API_BASE_URL}/notes/${id}`, {\r\n    method: \"DELETE\",\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  if (!res.ok) throw new Error(\"Failed to delete note\");\r\n  return res.json();\r\n}\r\n\r\n// Update note by id (assuming JSON body, no image update here)\r\nexport async function updateNote(id, updatedData) {\r\n  // updatedData = { title, content, topic }\r\n  const token = localStorage.getItem(\"token\");\r\n  const res = await fetch(`${API_BASE_URL}/notes/${id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(updatedData),\r\n  });\r\n  if (!res.ok) throw new Error(\"Failed to update note\");\r\n  return res.json();\r\n}\r\n\r\n// Create new note with optional image upload\r\nexport async function createNote(noteData) {\r\n  // noteData = { title, content, topic, imageFile (optional) }\r\n  const token = localStorage.getItem(\"token\");\r\n  const formData = new FormData();\r\n  formData.append(\"title\", noteData.title);\r\n  formData.append(\"content\", noteData.content);\r\n  formData.append(\"topic\", noteData.topic);\r\n\r\n  if (noteData.imageFile) {\r\n    formData.append(\"image\", noteData.imageFile);\r\n  }\r\n\r\n  const res = await fetch(`${API_BASE_URL}/notes/create`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`, // Do NOT set Content-Type manually when using FormData\r\n    },\r\n    body: formData,\r\n  });\r\n\r\n  if (!res.ok) {\r\n    let errorMsg = \"Failed to create note\";\r\n    try {\r\n      const errData = await res.json();\r\n      errorMsg = errData.message || errorMsg;\r\n    } catch {}\r\n    throw new Error(errorMsg);\r\n  }\r\n\r\n  return res.json();\r\n}\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,OAAO,eAAeC,SAASA,CAACC,WAAW,EAAE;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,aAAa,EAAE;MACzDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IAClC,CAAC,CAAC;IACF,OAAO,MAAMC,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,OAAO;MAAEC,OAAO,EAAE;IAAyC,CAAC;EAC9D;AACF;AAEA,OAAO,eAAeC,YAAYA,CAACX,WAAW,EAAE;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,gBAAgB,EAAE;MAC5DK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IAClC,CAAC,CAAC;IAEF,MAAMY,IAAI,GAAG,MAAMX,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAI,CAACP,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACF,OAAO,IAAI,qBAAqB,CAAC;IACxD;IAEA,OAAOE,IAAI;EACb,CAAC,CAAC,OAAOH,GAAG,EAAE;IACZ,OAAO;MAAEC,OAAO,EAAED,GAAG,CAACC,OAAO,IAAI;IAAyC,CAAC;EAC7E;AACF;;AAEA;AACA,OAAO,eAAeK,QAAQA,CAAA,EAAG;EAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,GAAG,GAAG,MAAMjB,KAAK,CAAC,GAAGJ,YAAY,QAAQ,EAAE;IAC/CM,OAAO,EAAE;MAAEgB,aAAa,EAAE,UAAUJ,KAAK;IAAG;EAC9C,CAAC,CAAC;EACF,IAAI,CAACG,GAAG,CAACN,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAOK,GAAG,CAACX,IAAI,CAAC,CAAC;AACnB;;AAEA;AACA,OAAO,eAAea,UAAUA,CAACC,EAAE,EAAE;EACnC,MAAMN,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,GAAG,GAAG,MAAMjB,KAAK,CAAC,GAAGJ,YAAY,UAAUwB,EAAE,EAAE,EAAE;IACrDnB,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MAAEgB,aAAa,EAAE,UAAUJ,KAAK;IAAG;EAC9C,CAAC,CAAC;EACF,IAAI,CAACG,GAAG,CAACN,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAOK,GAAG,CAACX,IAAI,CAAC,CAAC;AACnB;;AAEA;AACA,OAAO,eAAee,UAAUA,CAACD,EAAE,EAAEE,WAAW,EAAE;EAChD;EACA,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,GAAG,GAAG,MAAMjB,KAAK,CAAC,GAAGJ,YAAY,UAAUwB,EAAE,EAAE,EAAE;IACrDnB,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCgB,aAAa,EAAE,UAAUJ,KAAK;IAChC,CAAC;IACDX,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACiB,WAAW;EAClC,CAAC,CAAC;EACF,IAAI,CAACL,GAAG,CAACN,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAOK,GAAG,CAACX,IAAI,CAAC,CAAC;AACnB;;AAEA;AACA,OAAO,eAAeiB,UAAUA,CAACC,QAAQ,EAAE;EACzC;EACA,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMS,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,QAAQ,CAACI,KAAK,CAAC;EACxCH,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,QAAQ,CAACK,OAAO,CAAC;EAC5CJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,QAAQ,CAACM,KAAK,CAAC;EAExC,IAAIN,QAAQ,CAACO,SAAS,EAAE;IACtBN,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,QAAQ,CAACO,SAAS,CAAC;EAC9C;EAEA,MAAMd,GAAG,GAAG,MAAMjB,KAAK,CAAC,GAAGJ,YAAY,eAAe,EAAE;IACtDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPgB,aAAa,EAAE,UAAUJ,KAAK,EAAE,CAAE;IACpC,CAAC;IACDX,IAAI,EAAEsB;EACR,CAAC,CAAC;EAEF,IAAI,CAACR,GAAG,CAACN,EAAE,EAAE;IACX,IAAIqB,QAAQ,GAAG,uBAAuB;IACtC,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMhB,GAAG,CAACX,IAAI,CAAC,CAAC;MAChC0B,QAAQ,GAAGC,OAAO,CAACzB,OAAO,IAAIwB,QAAQ;IACxC,CAAC,CAAC,MAAM,CAAC;IACT,MAAM,IAAIpB,KAAK,CAACoB,QAAQ,CAAC;EAC3B;EAEA,OAAOf,GAAG,CAACX,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}